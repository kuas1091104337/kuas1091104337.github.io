import{_ as i,g as _}from"./index-CNwOqUnJ.js";const s={};function t(a,e){return e[0]||(e[0]=_(`<h3 class="interview__title">晶睿通訊</h3><p class="interview__text">1.var、let、const 的區别?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">同 Wow Gaming 1.</span></p><p class="interview__text">2.箭頭函數 與 普通函數 的區别?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">同 Wow Gaming 2.</span></p><p class="interview__text">3.bind、call、apply 區別?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">同 杏遠科技 7.</span></p><p class="interview__text">4.什麼是立即函式?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">在定義後立即執行的匿名函式。它通常用於：</span><span class="interview__example_txt"><i class="interview__example__note">1.建立局部作用域</i>：將變數和函數限制在立即函式內部，避免污染全域命名空間。</span><span class="interview__example_txt"><i class="interview__example__note">2.封裝代碼</i>：將一組相關的程式碼封裝成一個獨立的單元，提高程式碼的可維護性。</span><span class="interview__example_txt"><i class="interview__example__note">3.立即執行</i>：確保程式碼在定義時就執行，常用於初始化變數或執行一次性的操作。</span></p><pre class="interview__code">const hello = function(name){
  console.log(&#39;Hello &#39;+name+&#39;!&#39;);
}(&#39;Mike&#39;) <i class="interview__code_note">//若要傳值進去可以加參數在最後面的()</i>
<i class="interview__code_note">// Hello Mike!</i>
<i class="interview__code_note">也可以這樣寫</i>
(function(food){
  console.log(&#39;大俠愛吃&#39; + food)
}(&#39;漢堡包&#39;));
<i class="interview__code_note">或這樣寫</i>
(function(food){
  console.log(&#39;大俠愛吃&#39; + food)
})(&#39;漢堡包&#39;);
<i class="interview__code_note">//大俠愛吃漢堡包</i>
</pre><p class="interview__text">5.v-show 和 v-if 有什麼差別?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">v-if 是 dom 元素整個新增或刪除 &lt;!--v-if--&gt;</span><span class="interview__example_txt">v-show 是元素添加或刪除 style=&quot;display:none;&quot;</span><span class="interview__example_txt">效能消耗：v-if有比較高的切換消耗，v-show 有比較高的初始渲染消耗</span><span class="interview__example_txt">如果需要頻繁地切換，使用 v-show 較好</span><span class="interview__example_txt">如果是登入的資訊或選單，和隱私的資料如獎金，則使用v-if 較好</span></p><p class="interview__text">6.雙向綁定是什麼 v-model?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">Vue 的雙向資料綁定是指視圖 (HTML 範本) 和資料模型 (JavaScript 物件) 之間的雙向同步更新。即：當資料模型發生變化時，視圖會自動更新；反之，當使用者在視圖中進行互動修改時，資料模型也會自動更新。</span><span class="interview__example_txt">Vue 使用 v-model 指令來實現雙向資料綁定，特別適用於表單控制項 (如 &lt;input&gt;、&lt;textarea&gt; 和 &lt;select&gt;)。 透過 v-model，Vue 會自動實現資料和視圖之間的同步。</span></p><p class="interview__text">7.methods 和 computed 的區别?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">methods 和 computed 都可以用來定義函數，但它們的作用和運作方式有明顯的不同</span><span class="interview__example_txt">methods 是普通的函數方法，用於回應事件或執行邏輯。</span><span class="interview__example_txt">computed 是計算屬性，透過vue綁定的資料發生改變時才會重新去執行處理計算。</span></p><div class="interview__table interview__table-m"><ul class="interview___hd"><li class="interview___hd_grid">特性</li><li class="interview___hd_grid">methods</li><li class="interview___hd_grid">computed</li></ul><ul class="interview___bd"><li class="interview___bd_grid interview___bd_grid-tac">執行方式</li><li class="interview___bd_grid">每次呼叫都執行方法邏輯</li><li class="interview___bd_grid">有依賴的資料變化時才重新計算</li></ul><ul class="interview___bd"><li class="interview___bd_grid interview___bd_grid-tac">是否緩存</li><li class="interview___bd_grid">不會緩存，調用時總是重新執行</li><li class="interview___bd_grid">會緩存結果，依賴資料不變時返回緩存</li></ul><ul class="interview___bd"><li class="interview___bd_grid interview___bd_grid-tac">適用場景</li><li class="interview___bd_grid">用於事件處理或簡單的邏輯計算</li><li class="interview___bd_grid">用於基於依賴資料的複雜計算屬性</li></ul><ul class="interview___bd"><li class="interview___bd_grid interview___bd_grid-tac">是否响应式</li><li class="interview___bd_grid">不具备响应式特性</li><li class="interview___bd_grid">具备响应式特性</li></ul></div><p class="interview__text">8.v-if 和 v-for 的執行的優先順序那個高?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">v-if 優先 v-for 比高</span></p><p class="interview__text">9.單元測試 unit testing 有做過嗎?</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt"></span></p><p class="interview__text">10.什麼是虛擬DOM？</p><p class="interview__ans">ANS:</p><p class="interview__example"><span class="interview__example_txt">虛擬 DOM (Virtual DOM) 是一種 JavaScript 對象的抽象，用於描述真實 DOM 的結構和狀態。現代前端框架 (如 React、Vue) 用來優化效能的一種技術。</span><span class="interview__example_txt">優點是可以最小化更新：透過比較虛擬 DOM 的新舊狀態 (稱為 &quot;diffing&quot;)，找出需要更新的最小差異，最後只更新真實 DOM 中變化的部分。</span><span class="interview__example_txt">透過減少直接操作真實 DOM 的次數，提高了應用程式的效率和使用者體驗。</span><span class="interview__example_txt">跨平台支援：虛擬 DOM 不僅可以在瀏覽器中操作，還可以用於服務端渲染 (SSR)</span></p>`,33))}const l=i(s,[["render",t]]);export{l as default};
